<?php

declare(strict_types=1);

namespace App\TypeScript;

use Spatie\TypeScriptTransformer\Structures\TransformedType;
use Spatie\TypeScriptTransformer\Structures\TypesCollection;
use Spatie\TypeScriptTransformer\Writers\ModuleWriter;

final class NativeJsWriter extends ModuleWriter
{
    public function format(TypesCollection $collection): string
    {
        $output = <<<'TS'
        /*
         * This file is automatically generated by AzuraCast.
         * To update it, run:
         * `backend/bin/console azuracast:dev:ts`
         */
        
        
        TS;

        $iterator = $collection->getIterator();
        $iterator->uasort(function (TransformedType $a, TransformedType $b) {
            return strcmp($a->name ?? '', $b->name ?? '');
        });

        /** @var TransformedType $type */
        foreach ($iterator as $type) {
            if ($type->isInline) {
                continue;
            }

            if ($type->keyword === 'const') {
                $this->handleNativeJsEnum($type, $output);
            } else {
                $output .= "export {$type->toString()}" . PHP_EOL . PHP_EOL;
            }
        }

        return $output;
    }

    protected function handleNativeJsEnum(TransformedType $type, string &$output): void
    {
        $output .= "export const {$type->name} = {$type->transformed}";
        if ($type->trailingSemicolon) {
            $output .= ';';
        }
        $output .= PHP_EOL;

        $output .= "export type {$type->name}Enum = typeof {$type->name}[keyof typeof {$type->name}]";
        if ($type->trailingSemicolon) {
            $output .= ';';
        }
        $output .= PHP_EOL . PHP_EOL;
    }
}
